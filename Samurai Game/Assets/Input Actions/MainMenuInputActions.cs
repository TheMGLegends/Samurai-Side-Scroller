//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/MainMenuInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainMenuInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainMenuInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainMenuInputActions"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""eb7544e3-c96d-4e3e-9b94-24b67a75780c"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""8d9529be-a46d-43a0-9394-7e6b300dd61f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""764096a0-aef0-426e-89ab-f96a39f434a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectLevel1"",
                    ""type"": ""Button"",
                    ""id"": ""5fa79f1b-470d-4fd0-9c13-3d6ba40a0221"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectLevel2"",
                    ""type"": ""Button"",
                    ""id"": ""30362932-4ea7-45fa-93f7-44c7d3157a27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rebinding"",
                    ""type"": ""Button"",
                    ""id"": ""5a8c3ea9-591c-4db1-9e04-0a81bfa41983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4aee76e0-a28e-4394-955d-6db6ca2695c3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc6c7d28-8706-4e77-9322-9ee0a7d8647a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30d6a001-e72c-4878-9db1-638de4967131"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLevel1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9db9ed17-5fe0-4f3e-b8b7-e942e97587d3"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLevel2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""681f7bc1-56c3-4574-9287-bc25d8370223"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rebinding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Play = m_UI.FindAction("Play", throwIfNotFound: true);
        m_UI_Quit = m_UI.FindAction("Quit", throwIfNotFound: true);
        m_UI_SelectLevel1 = m_UI.FindAction("SelectLevel1", throwIfNotFound: true);
        m_UI_SelectLevel2 = m_UI.FindAction("SelectLevel2", throwIfNotFound: true);
        m_UI_Rebinding = m_UI.FindAction("Rebinding", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Play;
    private readonly InputAction m_UI_Quit;
    private readonly InputAction m_UI_SelectLevel1;
    private readonly InputAction m_UI_SelectLevel2;
    private readonly InputAction m_UI_Rebinding;
    public struct UIActions
    {
        private @MainMenuInputActions m_Wrapper;
        public UIActions(@MainMenuInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_UI_Play;
        public InputAction @Quit => m_Wrapper.m_UI_Quit;
        public InputAction @SelectLevel1 => m_Wrapper.m_UI_SelectLevel1;
        public InputAction @SelectLevel2 => m_Wrapper.m_UI_SelectLevel2;
        public InputAction @Rebinding => m_Wrapper.m_UI_Rebinding;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Play.started += instance.OnPlay;
            @Play.performed += instance.OnPlay;
            @Play.canceled += instance.OnPlay;
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
            @SelectLevel1.started += instance.OnSelectLevel1;
            @SelectLevel1.performed += instance.OnSelectLevel1;
            @SelectLevel1.canceled += instance.OnSelectLevel1;
            @SelectLevel2.started += instance.OnSelectLevel2;
            @SelectLevel2.performed += instance.OnSelectLevel2;
            @SelectLevel2.canceled += instance.OnSelectLevel2;
            @Rebinding.started += instance.OnRebinding;
            @Rebinding.performed += instance.OnRebinding;
            @Rebinding.canceled += instance.OnRebinding;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Play.started -= instance.OnPlay;
            @Play.performed -= instance.OnPlay;
            @Play.canceled -= instance.OnPlay;
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
            @SelectLevel1.started -= instance.OnSelectLevel1;
            @SelectLevel1.performed -= instance.OnSelectLevel1;
            @SelectLevel1.canceled -= instance.OnSelectLevel1;
            @SelectLevel2.started -= instance.OnSelectLevel2;
            @SelectLevel2.performed -= instance.OnSelectLevel2;
            @SelectLevel2.canceled -= instance.OnSelectLevel2;
            @Rebinding.started -= instance.OnRebinding;
            @Rebinding.performed -= instance.OnRebinding;
            @Rebinding.canceled -= instance.OnRebinding;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IUIActions
    {
        void OnPlay(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
        void OnSelectLevel1(InputAction.CallbackContext context);
        void OnSelectLevel2(InputAction.CallbackContext context);
        void OnRebinding(InputAction.CallbackContext context);
    }
}
